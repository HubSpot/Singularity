#!/bin/bash -x
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Fail fast and fail hard.
set -eo pipefail

function install_baragon_config {
  mkdir -p /etc/baragon
  cat > /etc/baragon/baragon_service.yaml <<EOF
# singularity-related config:
server:
  type: simple
  applicationContextPath: /baragon/v2
  connector:
    type: http
    port: 8080
  requestLog:
    appenders:
      - type: file
        currentLogFilename: ../logs/access.log
        archivedLogFilenamePattern: ../logs/access-%d.log.gz

zookeeper:
  quorum: localhost:2181
  zkNamespace: baragon
  sessionTimeoutMillis: 60000
  connectTimeoutMillis: 5000
  retryBaseSleepTimeMilliseconds: 1000
  retryMaxTries: 3

EOF
cat > /etc/baragon/baragon_agent.yaml <<EOF
# singularity-related config:
server:
  type: simple
  applicationContextPath: /baragon/v1
  connector:
    type: http
    port: 8081
  requestLog:
    appenders:
      - type: file
        currentLogFilename: ../logs/access.log
        archivedLogFilenamePattern: ../logs/access-%d.log.gz

zookeeper:
  quorum: localhost:2181
  zkNamespace: baragon
  sessionTimeoutMillis: 60000
  connectTimeoutMillis: 5000
  retryBaseSleepTimeMilliseconds: 1000
  retryMaxTries: 3

loadBalancerConfig:
  name: vagrant
  domain: vagrant.baragon.biz
  rootPath: /etc/nginx/conf.d
  checkConfigCommand: /usr/sbin/nginx -t
  reloadConfigCommand: /usr/sbin/nginx -s reload

templates:
  - filename: "proxy/%s.conf"
    template: |
      # This configuration is automatically generated by Baragon, local changes may be lost!
      #
      # Service ID: {{{service.serviceId}}}
      # Service base path: {{{service.serviceBasePath}}}
      #
      # Service owner(s):
      {{#each service.owners}}#   - {{{.}}}
      {{else}}#   (no owners defined)
      {{/each}}#
      #
      
      {{#if upstreams}}
      {{#if service.options.nginxExtraConfigs}}
      # BEGIN CUSTOM NGINX CONFIGS
      {{#each service.options.nginxExtraConfigs}}{{{.}}}
      {{/each}}
      # END CUSTOM NGINX CONFIGS
      {{/if}}

      location {{{service.options.nginxLocationModifier}}} {{{service.serviceBasePath}}} {
          proxy_set_header Host vagrant-singularity;
          proxy_pass http://baragon_{{{service.serviceId}}};
          proxy_connect_timeout {{firstOf service.options.nginxProxyConnectTimeout 55}};
          proxy_read_timeout {{firstOf service.options.nginxProxyReadTimeout 60}};
          
          {{#if service.options.nginxExtraLocationConfigs}}
          # BEGIN CUSTOM NGINX LOCATION CONFIGS
          {{#each service.options.nginxExtraLocationConfigs}}{{{.}}}
          {{/each}}
          # END CUSTOM NGINX LOCATION CONFIGS
          {{/if}}
      }
      {{else}}
      #
      # Service is disabled due to no defined upstreams!
      # It's safe to delete this file if not needed.
      #
      {{/if}}
  - filename: "upstreams/%s.conf"
    template: |
      # This configuration is automatically generated by Baragon, local changes may be lost!
      #
      # Service ID: {{{service.serviceId}}}
      # Service base path: {{{service.serviceBasePath}}}
      #
      # Service owner(s):
      {{#each service.owners}}#   - {{{.}}}
      {{else}}#   (no owners defined)
      {{/each}}#
      #
      {{#if upstreams}}
      upstream baragon_{{{service.serviceId}}} {
          {{#each upstreams}}server {{{upstream}}};  # {{{requestId}}}
          {{/each}}
          {{#if service.options.nginxExtraUpstreamConfigs}}
          # BEGIN CUSTOM NGINX UPSTREAM CONFIGS
          {{#each service.options.nginxExtraUpstreamConfigs}}{{{.}}}
          {{/each}}
          # END CUSTOM NGINX UPSTREAM CONFIGS
          {{/if}}
      }
      {{else}}
      #
      # Service is disabled due to no defined upstreams!
      # It's safe to delete this file if not needed.
      #
      {{/if}}
EOF
}

function build_baragon {
  cd /home/vagrant
  wget https://github.com/HubSpot/Baragon/archive/master.zip
  if [[ -d /home/vagrant/Baragon-master ]]; then
    rm -r /home/vagrant/Baragon-master
  fi
  unzip master.zip
  chown -R vagrant /home/vagrant/Baragon-master
  cd /home/vagrant/Baragon-master
  sudo -u vagrant HOME=/home/vagrant mvn clean package
}

function install_baragon {
  mkdir -p /var/log/baragon
  mkdir -p /usr/local/baragon/bin
  cp /home/vagrant/Baragon-master/BaragonService/target/BaragonService-*-SNAPSHOT.jar /usr/local/baragon/bin/baragon_service.jar
  cp /home/vagrant/Baragon-master/BaragonAgentService/target/BaragonAgentService-*-SNAPSHOT.jar /usr/local/baragon/bin/baragon_agent.jar

  cat > /etc/init/baragon_service.conf <<EOF
#!upstart
description "Baragon Service"

env PATH=/usr/local/baragon/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin

start on stopped rc RUNLEVEL=[2345]

respawn

exec java -Xmx512m -Djava.net.preferIPv4Stack=true -jar /usr/local/baragon/bin/baragon_service.jar server /etc/baragon/baragon_service.yaml >> /var/log/baragon/baragon_service.log 2>&1
EOF

  cat > /etc/init/baragon_agent.conf <<EOF
#!upstart
description "Baragon Agent Service"

env PATH=/usr/local/baragon/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin

start on stopped rc RUNLEVEL=[2345]

respawn

exec java -Xmx512m -Djava.net.preferIPv4Stack=true -jar /usr/local/baragon/bin/baragon_agent.jar server /etc/baragon/baragon_agent.yaml >> /var/log/baragon/baragon_agent.log 2>&1
EOF
}


function stop_baragon {
  set +e  # okay if this fails (i.e. not installed)
  service baragon_agent stop
  service baragon_service stop
  set -e
}

function start_baragon {
  service baragon_service start
  service baragon_agent start
}

function ensure_nginx {
  sudo apt-get install -y nginx
  mkdir -p /etc/nginx/conf.d/proxy /etc/nginx/conf.d/upstreams
  chmod a+rw /etc/nginx/conf.d/proxy /etc/nginx/conf.d/upstreams

  cat > /etc/nginx/conf.d/nginx.conf <<EOF
server {
    listen 80;

    include /etc/nginx/conf.d/proxy/*.conf;
}

include /etc/nginx/conf.d/upstreams/*.conf;
EOF
  if [[ -e /etc/nginx/sites-enabled/default ]]; then
    rm /etc/nginx/sites-enabled/default
  fi
}

ensure_nginx
stop_baragon
install_baragon_config
build_baragon
install_baragon
start_baragon

echo "Great Job!"
